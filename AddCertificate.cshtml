@page
@model AddModel
@{
    ViewData["Title"] = "Add";
}

<form method="post" id="addForm">
    <div class="d-flex justify-content-between align-items-center mb-3">
        <h1 class="page-title">Add Certificate</h1>
    </div>
    <p class="subtitle">Add new certificate entrys. Information for Column 1,2,4,5 shall be shown on the Manual Easa Form automatically upon release.</p>

    <div class="card mb-4">
        <div class="card-body">
            <div class="row mb-3">
                <div class="col-md-6">
                    <div class="mb-3">
                        <label asp-for="Edition" class="form-label">3. Edition of Form Tracking No.<span class="error-star" style="color: red;">*</span></label>
                        <input asp-for="Edition" maxlength="2" class="form-control predefined" placeholder="Enter Edition of Form Tracking Number" value="00" oninput="this.value = this.value.replace(/[^0-9]/g, '')" id="add_Edition" readonly>
                    </div>
                </div>
                <div class="col-md-6">
                    <div class="mb-3">
                        <label asp-for="Item" class="form-label">6. Item<span class="error-star" style="color: red;">*</span></label>
                        <input asp-for="Item" class="form-control predefined" placeholder="Enter Item " value="001" readonly>
                    </div>
                </div>
            </div>

            <div class="row mb-3">
                <div class="col-md-6">
                    <div class="mb-3">
                        <label asp-for="ProductDescription" class="form-label">7. Description<span class="error-star" style="color: red;">*</span></label>
                        <input asp-for="ProductDescription" class="form-control predefined" placeholder="Select Part No. to see details" id="add_ProductDescription" readonly>
                    </div>
                </div>
                <div class="col-md-6">
                    <div class="mb-3">
                        <label asp-for="ProductNo" class="form-label">8. Part No.<span class="error-star" style="color: red;">*</span></label>
                        <select asp-for="ProductNo" class="form-control mandatory" asp-items="Model.ProductNoList" id="add_ProductNo">
                            <option value="">-- Select Part No. --</option>
                        </select>
                    </div>
                </div>
            </div>

            <div class="row mb-3">
                <div class="col-md-6">
                    <div class="mb-3">
                        <label asp-for="Quantity" class="form-label">9. Qty.<span class="error-star" style="color: red;">*</span></label>
                        <input asp-for="Quantity" maxlength="5" class="form-control mandatory" placeholder="Enter Qty." value="01" oninput="this.value = this.value.replace(/[^0-9]/g, '')" id="add_Quantity" onblur="formatQuantity(this)">
                    </div>
                </div>
                <div class="col-md-6">
                    <div class="mb-3">
                        <label asp-for="SerialNo" class="form-label">10. Serial No.<span class="error-star" style="color: red;">*</span></label>
                        <input asp-for="SerialNo" class="form-control mandatory" placeholder="Enter Serial No" id="add_SerialNo" maxlength="25">
                    </div>
                </div>
            </div>

            <div class="row mb-3">
                <div class="col-md-6">
                    <div class="mb-3">
                        <label asp-for="Status" class="form-label">11. Status/Work<span class="error-star" style="color: red;">*</span></label>
                        <select asp-for="Status" id="add_Status" class="form-control mandatory" asp-items="Model.StatusList">
                            <option value="" selected disabled>-- Select Status/Work --</option>
                        </select>
                    </div>
                </div>
            </div>

            <div class="row mb-3">
                <div class="col-md-6">
                    <div class="mb-3">
                        <label asp-for="Remarks1" class="form-label">12. Remarks (Line 1)</label>
                        <textarea asp-for="Remarks1" class="form-control" placeholder="Enter Remarks (Line 1)" maxlength="150" rows="2"></textarea>
                    </div>
                </div>
                <div class="col-md-6">
                    <div class="mb-3">
                        <label asp-for="Remarks2" class="form-label">12. Remarks (Line 2)</label>
                        <textarea asp-for="Remarks2" class="form-control" placeholder="Enter Remarks (Line 2)" maxlength="150" rows="2"></textarea>
                    </div>
                </div>
            </div>

            <div class="row mb-3">
                <div class="col-md-6">
                    <div class="mb-3">
                        <label asp-for="Remarks3" class="form-label">12. Remarks (Line 3)</label>
                        <textarea asp-for="Remarks3" class="form-control" placeholder="Enter Remarks 3 (Line 3)" maxlength="150" rows="2"></textarea>
                    </div>
                </div>
                <div class="col-md-6">
                    <div class="mb-3">
                        <label asp-for="Remarks4" class="form-label">12. Remarks (Line 4)</label>
                        <textarea asp-for="Remarks4" class="form-control" placeholder="Enter Remarks 4 (Line 4)" maxlength="150" rows="2"></textarea>
                    </div>
                </div>
            </div>

            <div class="row mb-3">
                <div class="col-md-6">
                    <div class="mb-3">
                        <label asp-for="Amendment" class="form-label">12. Remarks (Amendment) <span class="error-star" style="color: red;">*</span></label>
                        <select asp-for="Amendment" class="form-control mandatory" asp-items="Model.AmendmentList" id="add_Amendment" title="-- Select Remarks (Amendment) --" multiple>
                        </select>
                    </div>
                </div>
                <div class="col-md-6">
                    <div class="mb-5">
                        <label asp-for="Approved" class="form-label">13a. Approved Design Indicator<span class="error-star" style="color: red;">*</span></label>
                        <select asp-for="Approved" id="add_Approved" class="form-control mandatory" asp-items="Model.ApprovedList">
                            <option value="">-- Select Approved Design Indicator --</option>
                        </select>
                    </div>
                    <div class="mb-3">
                        <label asp-for="Authorisation" class="form-label">13c. Approval/Authorisation Number<span class="error-star" style="color: red;">*</span></label>
                        <input asp-for="Authorisation" class="form-control predefined" placeholder="Enter Approval/Authorisation Number" readonly>
                    </div>
                </div>
            </div>

            <div class="row mb-3">
                <div class="col-md-6">
                    <div class="mb-3">
                        <label asp-for="Signatory" class="form-label">13d. Name of Signatory<span class="error-star" style="color: red;">*</span></label>
                        <input asp-for="Signatory" type="text" class="form-control predefined" id="add_Signatory" readonly>
                    </div>
                </div>
                <div class="col-md-6">
                    <div class="mb-3">
                        <label asp-for="Date" class="form-label">13e. Approval Date<span class="error-star" style="color: red;">*</span></label>
                        <input asp-for="Date" type="text" class="form-control predefined" value="@DateTime.Today.ToString("dd MMM yyyy")" id="add_Date" readonly>
                    </div>
                </div>
            </div>

            <hr>

            <div class="row mb-3">
                <div class="col-md-6">
                    <div class="mb-3">
                        <label asp-for="State" class="form-label">State<span class="error-star" style="color: red;">*</span></label>
                        <input asp-for="State" type="text" class="form-control predefined" value="Valid" id="add_State" readonly>
                    </div>
                </div>
                <div class="col-md-6">
                    @{
                        // This section appears to be a placeholder for a future feature.
                        // It is currently hidden because the condition is false.
                        var showComment = 0;
                    }
                    @if (showComment == 1)
                    {
                        <div class="mb-3">
                            <label asp-for="Comment" class="form-label">Comment</label>
                            <textarea asp-for="Comment" class="form-control" placeholder="Enter Comment" maxlength="100" rows="2"></textarea>
                        </div>
                    }
                </div>
            </div>

            <small><span class="error-star" style="color: red;">*</span> Field is mandatory</small>

            <div class="row mt-3">
                <div class="col-12 text-end">
                    <button type="button" class="btn btn-primary" onclick="validateAddForm()"><i class="fas fa-check btn-icon me-2"></i>Submit</button>
                </div>
            </div>

        </div>
    </div>

    <div class="modal fade" id="confirmAddModal" tabindex="-1" aria-labelledby="confirmAddModalLabel" aria-hidden="true">
        <div class="modal-dialog modal-dialog-centered">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="confirmAddModalLabel">Confirm Submit</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <strong>You are about to create a new certificate database entry.</strong><br />
                    Once added, it cannot be removed, though updates are possible.
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal"><i class="fas fa-xmark btn-icon me-2"></i>Cancel</button>
                    <button type="button" class="btn btn-primary" id="confirmAddBtn">
                        <i class="fas fa-check btn-icon me-2"></i>Confirm
                    </button>
                </div>
            </div>
        </div>
    </div>
</form>

@section Scripts {
    <script>
        // --- [IMPROVEMENT] Encapsulated Helper Functions ---

        /**
         * Displays a dismissible alert message at the bottom of the screen.
         */
        function showAlert(message, type = 'danger') {
            const icon = type === 'success' ? 'fa-check-circle' : 'fa-exclamation-triangle';
            const alert = document.createElement('div');
            alert.className = `alert alert-${type} alert-dismissible fade show position-fixed`;
            alert.style.cssText = 'bottom: 20px; left: 50%; transform: translateX(-50%); z-index: 9999; min-width: 300px; text-align: left;';
            // Using template literals for cleaner HTML string construction
            alert.innerHTML = `<i class="fas ${icon} me-2"></i> ${message}<button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>`;
            document.body.appendChild(alert);
            // Use modern .remove() method for cleanup
            setTimeout(() => alert.remove(), 8000);
        }

        /**
         * Formats the quantity input to have a leading zero if it's a single digit.
         */
        function formatQuantity(input) {
            let value = input.value.trim();
            if (value === '') return;
            const num = parseInt(value, 10);
            // Default to '01' if input is invalid or zero
            input.value = (!isNaN(num) && num > 0) ? num.toString().padStart(2, '0') : '01';
        }

        /** Resets the serial number field to its default editable state. */
        function resetSerialNoField() {
            const serialNoInput = document.getElementById('add_SerialNo');
            if (serialNoInput) {
                serialNoInput.readOnly = false;
                serialNoInput.value = '';
                serialNoInput.placeholder = 'Enter Serial No.';
                serialNoInput.classList.remove('bg-light');
            }
        }

        /** Resets the entire form to its initial state after a successful submission. */
        function resetAddForm() {
            const form = document.getElementById('addForm');
            if (!form) return;
            form.reset();

            // Restore default values for fields not handled by form.reset()
            document.getElementById('add_Edition').value = "00";
            document.getElementById('add_Item').value = "001";
            document.getElementById('add_Quantity').value = "01";
            document.getElementById('add_State').value = "Valid";
            document.getElementById('add_Date').value = "@DateTime.Today.ToString("dd MMM yyyy")";

            // Explicitly clear multi-select dropdown and reset Serial No field
            const amendmentSelect = document.getElementById('add_Amendment');
            if (amendmentSelect) {
                Array.from(amendmentSelect.options).forEach(option => option.selected = false);
            }
            resetSerialNoField();

            // Clear any validation error styles
            document.querySelectorAll('#addForm .is-invalid').forEach(el => el.classList.remove('is-invalid'));
        }

        /** Validates mandatory fields and displays errors or triggers the confirmation modal. */
        function validateAddForm() {
            document.querySelectorAll('#addForm .is-invalid').forEach(el => el.classList.remove('is-invalid'));

            const mandatoryFields = [
                { id: 'add_Edition', name: 'Edition of Form Tracking Number' },
                { id: 'add_ProductNo', name: 'Part No.' },
                { id: 'add_Quantity', name: 'Quantity' },
                { id: 'add_SerialNo', name: 'Serial No.' },
                { id: 'add_Status', name: 'Status/Work' },
                { id: 'add_Amendment', name: 'Remarks (Amendment)' },
                { id: 'add_Approved', name: 'Approved Design Indicator' }
            ];

            const errorMessages = [];
            mandatoryFields.forEach(field => {
                const el = document.getElementById(field.id);
                if (!el) return;

                // [IMPROVEMENT] Using a concise ternary operator for the check
                const isInvalid = el.multiple ? (el.selectedOptions.length === 0) : (!el.value.trim());

                if (isInvalid) {
                    errorMessages.push(`${field.name} is required.`);
                    el.classList.add('is-invalid');
                }
            });

            if (errorMessages.length > 0) {
                showAlert(`Validation Error:<br>${errorMessages.join('<br>')}`);
                return;
            }

            // If validation passes, show the confirmation modal
            const confirmModal = new bootstrap.Modal(document.getElementById('confirmAddModal'));
            confirmModal.show();
            document.getElementById('confirmAddBtn').onclick = () => document.getElementById('addForm').submit();
        }


        // --- [IMPROVEMENT] Main script execution after DOM is loaded ---
        document.addEventListener("DOMContentLoaded", function () {

            // --- [IMPROVEMENT] Securely pass data from Razor to JavaScript ---
            // Using Json.Serialize is safer than Html.Raw as it correctly handles special characters.
            const isSuccess = @Json.Serialize(Model.IsSuccess);
            const successMessage = @Json.Serialize(Model.SuccessMessage);

            if (isSuccess && successMessage) {
                showAlert(successMessage, 'success');
                resetAddForm();
            }

            // --- Event Listener for Part No. Change ---
            const productNoSelect = document.getElementById('add_ProductNo');
            if (productNoSelect) {
                productNoSelect.addEventListener('change', function () {
                    const productNo = this.value;
                    const productDescInput = document.getElementById('add_ProductDescription');
                    const serialNoInput = document.getElementById('add_SerialNo');

                    if (!productNo) {
                        if(productDescInput) productDescInput.value = '';
                        resetSerialNoField();
                        return;
                    }

                    const url = `?handler=ProductDetails&productNo=${encodeURIComponent(productNo)}`;
                    fetch(url)
                        .then(response => {
                            if (!response.ok) {
                                throw new Error(`Server responded with status: ${response.status}`);
                            }
                            return response.json();
                        })
                        .then(data => {
                            if (data.error) {
                                throw new Error(data.message || 'An unknown error occurred while fetching details.');
                            }
                            if (productDescInput) {
                                productDescInput.value = data.productDescription || '';
                            }
                            const isSerialized = (data.serialization || '').trim().toLowerCase() === 'yes';
                            if (isSerialized) {
                                resetSerialNoField();
                            } else if(serialNoInput) {
                                serialNoInput.readOnly = true;
                                serialNoInput.value = 'N/A';
                                serialNoInput.placeholder = '';
                                serialNoInput.classList.add('bg-light');
                            }
                        })
                        .catch(error => {
                            console.error('Error fetching part details:', error);
                            showAlert(error.message, 'danger');
                            if(productDescInput) productDescInput.value = '';
                            resetSerialNoField();
                        });
                });
            }

            // --- Event Listener for Amendment Dropdown (Logic is unchanged, kept for functionality) ---
            const amendmentSelect = document.getElementById('add_Amendment');
            if (amendmentSelect) {
                let previousSelection = [];
                amendmentSelect.addEventListener('mousedown', function () {
                    previousSelection = Array.from(this.selectedOptions).map(opt => opt.index);
                });
                amendmentSelect.addEventListener('change', function () {
                    const currentSelection = Array.from(this.selectedOptions).map(opt => opt.index);
                    const addedItems = currentSelection.filter(index => !previousSelection.includes(index));
                    if (addedItems.length === 0) return; // A deselection occurred

                    const maxNewIndex = Math.max(...addedItems);
                    if (maxNewIndex === 0) return; // First item was selected alone

                    // Cascade selection from the second item up to the highest selected one
                    for (let i = 1; i <= maxNewIndex; i++) {
                        this.options[i].selected = true;
                    }
                });
            }

            // The Signatory change event listener from the original code was removed
            // because the Signatory and Authorisation fields are now readonly and pre-filled by the server.
        });
    </script>
}