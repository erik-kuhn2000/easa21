@page
@model ManageStatusesModel
@{
    ViewData["Title"] = "Manage Statuses";
}

<div class="container-fluid">
    <div class="d-flex justify-content-between align-items-center mb-3">
        <h1 class="page-title">@ViewData["Title"]</h1>
        <div>
        </div>
    </div>
    <p class="subtitle">Add and delete statuses available in the application's dropdown lists.</p>

    <div class="card">
        <div class="card-header bg-light d-flex justify-content-between align-items-center">
            <h5 class="mb-0"><i class="fas fa-plus btn-icon me-2"></i>Add New Status</h5>
        </div>
        <div class="card-body">
            <form id="addStatusForm" method="post" onsubmit="addStatus(event);">
                @Html.AntiForgeryToken()
                <div class="row g-2 align-items-end">
                    <div class="col">
                        <label for="newStatusInput" class="form-label">Status<span class="error-star" style="color: red;">*</span></label>
                        <input type="text" id="newStatusInput" asp-for="NewStatus" class="form-control mandatory" placeholder="Enter Status" maxlenght="40" requried>
                    </div>
                    <div class="col-auto">
                        <button type="submit" class="btn btn-primary w-100">
                            <i class="fas fa-plus me-2"></i>Add
                        </button>
                    </div>
                </div>
                <small class="text-muted"><span class="error-star" style="color: red;">*</span> Field is mandatory</small>
            </form>
        </div>
    </div>

    <div class="card">
        <div class="card-header bg-light d-flex justify-content-between align-items-center">
            <h5 class="mb-0"><i class="fas fa-info btn-icon me-2"></i>Current Statuses</h5>
        </div>
        <div class="card-body">
            <div class="d-flex justify-content-end align-items-center mb-3">
                <div>
                    <button type="button" class="btn btn-sm btn-secondary me-2" onclick="deselectAllStatuses()"><i class="fas fa-eraser me-2"></i>Clear Selection</button>
                    <button type="button" class="btn btn-sm btn-primary" onclick="showDeleteConfirmation()">
                        <i class="fas fa-trash me-2"></i>Delete Selected
                    </button>
                </div>
            </div>

            <form id="deleteStatusForm" method="post">
                @Html.AntiForgeryToken()
                <div id="statusesListContainer" class="border rounded p-3 bg-white" style="min-height: 200px; max-height: 500px; overflow-y: auto;">
                </div>
            </form>
        </div>
    </div>
</div>

<div class="modal fade" id="confirmDeleteStatusesModal" tabindex="-1" aria-labelledby="confirmDeleteStatusesModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="confirmDeleteStatusesModalLabel">Confirm Delete</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <strong>You are about to delete status entries.</strong><br />
                This action is not reversible.
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal"><i class="fas fa-xmark me-2"></i>Cancel</button>
                <button type="button" class="btn btn-primary" id="confirmDeleteStatusesBtn">
                    <i class="fas fa-check me-2"></i>Confirm
                </button>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        // --- UTILITY FUNCTIONS ---
        function showSuccessMessage(message) {
            const alert = document.createElement('div');
            alert.className = 'alert alert-success alert-dismissible fade show position-fixed';
            alert.style.cssText = 'bottom: 10px; left: 50%; transform: translateX(-50%); z-index: 9999; min-width: 300px;';
            alert.innerHTML = `<i class="fas fa-check-circle me-2"></i> ${message}<button type="button" class="btn-close" data-bs-dismiss="alert"></button>`;
            document.body.appendChild(alert);
            setTimeout(() => bootstrap.Alert.getOrCreateInstance(alert)?.close(), 5000);
        }

        function showErrorMessage(message) {
            const alert = document.createElement('div');
            alert.className = 'alert alert-danger alert-dismissible fade show position-fixed';
            alert.style.cssText = 'bottom: 10px; left: 50%; transform: translateX(-50%); z-index: 9999; min-width: 300px;';
            alert.innerHTML = `<i class="fas fa-exclamation-circle me-2"></i> ${message}<button type="button" class="btn-close" data-bs-dismiss="alert"></button>`;
            document.body.appendChild(alert);
            setTimeout(() => bootstrap.Alert.getOrCreateInstance(alert)?.close(), 8000);
        }

        // --- PAGE-SPECIFIC LOGIC ---
        function renderStatuses(statuses) {
            const container = document.getElementById('statusesListContainer');
            if (!statuses || statuses.length === 0) {
                container.innerHTML = '<p class="text-muted text-center m-0">No statuses found.</p>';
                return;
            }

            let html = '<div class="row">';
            statuses.forEach((s, i) => {
                html += `
                    <div class="col-sm-6 col-md-4 col-lg-3 col-xl-2 mb-2">
                        <div class="form-check">
                            <input class="form-check-input status-checkbox" type="checkbox" name="SelectedStatuses" value="${s}" id="status_${i}">
                            <label class="form-check-label" for="status_${i}">${s}</label>
                        </div>
                    </div>`;
            });
            container.innerHTML = html + '</div>';
        }

        function loadStatuses() {
            const container = document.getElementById('statusesListContainer');
            container.innerHTML = `<div class="text-center p-5"><div class="spinner-border" role="status"><span class="visually-hidden">Loading...</span></div></div>`;

            fetch('@Url.Page("", "List")')
                .then(response => {
                    if (!response.ok) throw new Error("Network response was not ok");
                    return response.json();
                })
                .then(data => {
                    renderStatuses(data);
                })
                .catch(error => {
                    console.error('Error loading statuses:', error);
                    container.innerHTML = '<p class="text-danger text-center m-0">Error loading statuses.</p>';
                    showErrorMessage('Could not refresh the list of statuses.');
                });
        }

        function addStatus(event) {
            event.preventDefault();
            const input = document.getElementById('newStatusInput');
            const status = input.value.trim();
            if (!status) {
                input.classList.add('is-invalid');
                showErrorMessage('Please enter a status.');
                return;
            }
            input.classList.remove('is-invalid');

            const form = document.getElementById('addStatusForm');
            const formData = new FormData(form);

            fetch('@Url.Page("", "Add")', { method: 'POST', body: formData })
                .then(r => r.json())
                .then(d => {
                    if (d.success) {
                        showSuccessMessage(d.message);
                        input.value = '';
                        loadStatuses(); // Refresh the list
                    } else {
                        showErrorMessage(d.message);
                        input.classList.add('is-invalid');
                    }
                })
                .catch(e => {
                    console.error('Error adding status:', e);
                    showErrorMessage('An error occurred while adding the status.');
                });
        }

        function showDeleteConfirmation() {
            const selected = document.querySelectorAll('.status-checkbox:checked');
            if (selected.length === 0) {
                showErrorMessage('Please select at least one status to delete.');
                return;
            }
            const confirmModal = new bootstrap.Modal(document.getElementById('confirmDeleteStatusesModal'));
            confirmModal.show();
        }

        function deleteSelectedStatuses() {
            const form = document.getElementById('deleteStatusForm');
            const formData = new FormData(form);

            fetch('@Url.Page("", "Delete")', { method: 'POST', body: formData })
                .then(r => r.json())
                .then(d => {
                    if (d.success) {
                        showSuccessMessage(d.message);
                        loadStatuses(); // Refresh the list
                    } else {
                        showErrorMessage(d.message);
                    }
                })
                .catch(e => {
                    console.error('Error deleting statuses:', e);
                    showErrorMessage('An error occurred while deleting statuses.');
                })
                .finally(() => {
                    const confirmModal = bootstrap.Modal.getInstance(document.getElementById('confirmDeleteStatusesModal'));
                    confirmModal?.hide();
                });
        }

        function deselectAllStatuses() {
            document.querySelectorAll('.status-checkbox').forEach(c => c.checked = false);
        }

        // --- INITIALIZATION ---
        document.addEventListener('DOMContentLoaded', function() {
            // The initial list is rendered from the model on the server.
            renderStatuses(@Html.Raw(Json.Serialize(Model.Statuses)));

            // Attach event listener for the delete confirmation button
            const confirmDeleteBtn = document.getElementById('confirmDeleteStatusesBtn');
            if (confirmDeleteBtn) {
                confirmDeleteBtn.addEventListener('click', deleteSelectedStatuses);
            }

            const newStatusInput = document.getElementById('newStatusInput');
            if (newStatusInput) {
                // Add an event listener to remove the red border when the user starts typing
                newStatusInput.addEventListener('input', () => {
                    if (newStatusInput.classList.contains('is-invalid')) {
                        newStatusInput.classList.remove('is-invalid');
                    }
                });
            }
        });
    </script>
}