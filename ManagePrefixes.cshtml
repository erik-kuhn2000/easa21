@page
@model QApp.Pages.ManagePrefixesModel
@{
    ViewData["Title"] = "Manage Prefixes";
}

<div class="d-flex justify-content-between align-items-center mb-3">
    <h1 class="page-title">Manage Prefixes</h1>
</div>
<p class="subtitle">Add, update, and delete prefix entries.</p>

<form method="post">
    @Html.AntiForgeryToken()
    <div class="card mb-4">
        <div class="card-header">
            <h5 class="card-title mb-0"><i class="fas fa-plus btn-icon me-2"></i>Add New Prefix</h5>
        </div>
        <div class="card-body">
            <div class="row g-3">
                <div class="col-md-6">
                    <label asp-for="NewPrefix.Year" class="form-label">Year <span class="error-star" style="color: red;">*</span></label>
                    <input asp-for="NewPrefix.Year" class="form-control mandatory @(ModelState.GetFieldValidationState("NewPrefix.Year") == Microsoft.AspNetCore.Mvc.ModelBinding.ModelValidationState.Invalid ? "is-invalid" : "")" placeholder="Enter Year" maxlength="4">
                </div>
                <div class="col-md-6">
                    <label asp-for="NewPrefix.Code" class="form-label">Code <span class="error-star" style="color: red;">*</span></label>
                    <input asp-for="NewPrefix.Code" class="form-control mandatory @(ModelState.GetFieldValidationState("NewPrefix.Code") == Microsoft.AspNetCore.Mvc.ModelBinding.ModelValidationState.Invalid ? "is-invalid" : "")" placeholder="Enter Code" maxlength="2">
                </div>
            </div>

            <div class="row mt-3">
                <div class="col-md-12 text-end">
                    <button type="submit" class="btn btn-primary" name="handler" value="add">
                        <i class="fas fa-plus btn-icon me-2"></i>Add
                    </button>
                </div>
            </div>
            <small class="text-muted"><span class="error-star" style="color: red;">*</span> Field is mandatory</small>
        </div>
    </div>
</form>

@if (Model.Prefixes != null && Model.Prefixes.Any())
{
    <div class="table-responsive">
        <table class="table table-striped table-hover mb-0" id="prefixesTable">
            <thead>
                <tr>
                    <th data-sort="string">Year</th>
                    <th data-sort="string">Code</th>
                    <th>Actions</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var prefix in Model.Prefixes)
                {
                    <tr>
                        <td>@prefix.Year</td>
                        <td>@prefix.Code</td>
                        <td class="text-center">
                            <div class="d-flex gap-1 justify-content-center">
                                <button type="button" class="btn btn-primary btn-sm update-btn" data-year="@prefix.Year">
                                    <i class="fas fa-edit" title="Edit Prefix"></i>
                                </button>
                                <button type="button" class="btn btn-primary btn-sm delete-btn" data-year="@prefix.Year">
                                    <i class="fas fa-trash" title="Delete Prefix"></i>
                                </button>
                            </div>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
}
else
{
    <div class="card">
        <div class="card-body text-center">
            <i class="fas fa-info-circle fa-3x text-muted mb-3"></i>
            <h5>No Prefixes Found</h5>
            <p class="text-muted">Start by adding your first prefix using the form above.</p>
        </div>
    </div>
}

<div class="modal fade" id="updateModal" tabindex="-1" aria-labelledby="updateModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="updateModalLabel">Update Prefix</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <div id="updatePrefixForm">
                    <div class="text-center">
                        <div class="spinner-border" role="status">
                            <span class="visually-hidden">Loading...</span>
                        </div>
                        <p class="mt-2">Loading prefix details...</p>
                    </div>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">
                    <i class="fas fa-xmark btn-icon me-2"></i>Cancel
                </button>
                <button type="button" class="btn btn-primary" id="confirmUpdateBtn" disabled>
                    <i class="fas fa-save btn-icon me-2"></i>Update
                </button>
            </div>
        </div>
    </div>
</div>

<div class="modal fade" id="deleteModal" tabindex="-1" aria-labelledby="deleteModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="deleteModalLabel">Confirm Delete</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <strong>You are about to delete a prefix entry.</strong><br />
                This action is not reversible.
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">
                    <i class="fas fa-xmark btn-icon me-2"></i>Cancel
                </button>
                <button type="button" class="btn btn-primary" id="confirmDeleteBtn">
                    <i class="fas fa-trash btn-icon me-2"></i>Confirm
                </button>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        document.addEventListener('DOMContentLoaded', function () {

                 
            const table = document.getElementById('prefixesTable');
            if (!table) return;


            // Table sorting functionality
            const headers = table.querySelectorAll('thead th[data-sort]');
            headers.forEach((header, index) => {
                header.classList.add('sortable');
                header.addEventListener('click', () => {
                    const sortType = header.getAttribute('data-sort');
                    const currentDirection = header.classList.contains('asc') ? 'desc' : 'asc';
                    headers.forEach(h => h.classList.remove('asc', 'desc'));
                    header.classList.add(currentDirection);
                    sortTable(table, index, sortType, currentDirection);
                });
            });

            function sortTable(table, columnIndex, sortType, direction) {
                const tbody = table.querySelector('tbody');
                const rows = Array.from(tbody.querySelectorAll('tr'));
                rows.sort((a, b) => {
                    const aValue = a.cells[columnIndex].textContent.trim();
                    const bValue = b.cells[columnIndex].textContent.trim();
                    const comparison = aValue.localeCompare(bValue, undefined, { numeric: sortType === 'number' });
                    return direction === 'asc' ? comparison : -comparison;
                });
                rows.forEach(row => tbody.appendChild(row));
            }

            // Modal instances and handlers
            const updateModal = new bootstrap.Modal(document.getElementById('updateModal'));
            const deleteModal = new bootstrap.Modal(document.getElementById('deleteModal'));
            const updateModalBody = document.getElementById('updatePrefixForm');
            const confirmUpdateBtn = document.getElementById('confirmUpdateBtn');
            const confirmDeleteBtn = document.getElementById('confirmDeleteBtn');
            let currentUpdateYear = null;
            let currentDeleteYear = null;

            document.addEventListener('click', function (e) {
                const updateBtn = e.target.closest('.update-btn');
                if (updateBtn) {
                    const year = updateBtn.getAttribute('data-year');
                    if (year) showUpdatePrefixForm(year);
                }

                const deleteBtn = e.target.closest('.delete-btn');
                if (deleteBtn) {
                    const year = deleteBtn.getAttribute('data-year');
                    if (year) showDeleteConfirmation(year);
                }
            });

            confirmUpdateBtn.addEventListener('click', () => {
                if (currentUpdateYear) updatePrefix(currentUpdateYear);
            });

            confirmDeleteBtn.addEventListener('click', () => {
                if (currentDeleteYear) deletePrefix(currentDeleteYear);
            });

            function showUpdatePrefixForm(year) {
                currentUpdateYear = year;
                document.getElementById('updateModalLabel').textContent = `Update Prefix for Year: ${year}`;
                updateModalBody.innerHTML = `<div class="text-center"><div class="spinner-border" role="status"><span class="visually-hidden">Loading...</span></div><p class="mt-2">Loading details...</p></div>`;
                confirmUpdateBtn.disabled = true;
                updateModal.show();
                fetchPrefixDetails(year, displayUpdateForm);
            }

            function showDeleteConfirmation(year) {
                currentDeleteYear = year;
                deleteModal.show();
            }

            function fetchPrefixDetails(year, successCallback) {
                fetch(`?handler=PrefixDetails&year=${encodeURIComponent(year)}`)
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        successCallback(data.data);
                    } else {
                        updateModalBody.innerHTML = `<div class="alert alert-danger"><i class="fas fa-exclamation-triangle"></i><strong>Error:</strong> ${data.message}</div>`;
                    }
                })
                .catch(error => {
                    console.error('Error fetching prefix details:', error);
                    updateModalBody.innerHTML = `<div class="alert alert-danger"><i class="fas fa-exclamation-triangle"></i><strong>Network Error:</strong> ${error.message}</div>`;
                });
            }

            function displayUpdateForm(prefix) {
                const formHtml = `
                    <form id="updateForm">
                        <div class="mb-3">
                            <label class="form-label">Year<span class="error-star" style="color: red;">*</span></label>
                            <input id="update_Year" class="form-control predefined" value="${prefix.year || ''}" readonly>
                        </div>
                        <div class="mb-3">
                            <label class="form-label">Code <span class="error-star" style="color: red;">*</span></label>
                            <input id="update_Code" class="form-control mandatory" value="${prefix.code || ''}" placeholder="Enter Code" maxlength="2">
                        </div>
                        <small class="text-muted d-block"><span class="error-star" style="color: red;">*</span> Field is mandatory</small>
                    </form>`;
                updateModalBody.innerHTML = formHtml;
                confirmUpdateBtn.disabled = false;
            }

            function updatePrefix(year) {
                const codeElement = document.getElementById('update_Code');
                const code = codeElement.value.trim();

                if (!code) {
                    showErrorMessage('Code is a required field.');
                    codeElement.classList.add('is-invalid');
                    return;
                }
                codeElement.classList.remove('is-invalid');

                const antiForgeryToken = document.querySelector('input[name="__RequestVerificationToken"]').value;
                const formData = new FormData();
                formData.append('year', year);
                formData.append('code', code);
                formData.append('__RequestVerificationToken', antiForgeryToken);

                confirmUpdateBtn.disabled = true;
                confirmUpdateBtn.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Updating...';

                fetch('?handler=UpdatePrefix', { method: 'POST', body: formData })
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        showSuccessMessage(data.message);
                        setTimeout(() => location.reload(), 1500);
                    } else {
                        throw new Error(data.message || 'Update failed');
                    }
                })
                .catch(error => {
                    showErrorMessage(`Update error: ${error.message}`);
                })
                .finally(() => {
                    updateModal.hide();
                    confirmUpdateBtn.disabled = false;
                    confirmUpdateBtn.innerHTML = '<i class="fas fa-save btn-icon me-2"></i>Update';
                });
            }

            function deletePrefix(year) {
                const antiForgeryToken = document.querySelector('input[name="__RequestVerificationToken"]').value;
                const formData = new FormData();
                formData.append('year', year);
                formData.append('__RequestVerificationToken', antiForgeryToken);

                confirmDeleteBtn.disabled = true;
                confirmDeleteBtn.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Deleting...';

                fetch('?handler=DeletePrefix', { method: 'POST', body: formData })
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        showSuccessMessage(data.message);
                        setTimeout(() => location.reload(), 1500);
                    } else {
                        throw new Error(data.message || 'Delete failed');
                    }
                })
                .catch(error => {
                    showErrorMessage(`Delete error: ${error.message}`);
                })
                .finally(() => {
                    deleteModal.hide();
                    confirmDeleteBtn.disabled = false;
                    confirmDeleteBtn.innerHTML = '<i class="fas fa-trash btn-icon me-2"></i>Confirm';
                });
            }

            const addPrefixForm = document.getElementById('addPrefixForm');
        if (addPrefixForm) {
            addPrefixForm.addEventListener('submit', function (e) {
                // Step 1: Immediately prevent the default form submission to take control.
                e.preventDefault();

                const yearInput = document.querySelector('input[name="NewPrefix.Year"]');
                const codeInput = document.querySelector('input[name="NewPrefix.Code"]');
                const errorMessages = [];

                // Step 2: Validate each field.
                if (!yearInput.value.trim()) {
                    yearInput.classList.add('is-invalid');
                    errorMessages.push('Year is a required field.');
                } else {
                    yearInput.classList.remove('is-invalid');
                }

                if (!codeInput.value.trim()) {
                    codeInput.classList.add('is-invalid');
                    errorMessages.push('Code is a required field.');
                } else {
                    codeInput.classList.remove('is-invalid');
                }

                // Step 3: Decide what to do next.
                if (errorMessages.length > 0) {
                    // If there are errors, show the toast message.
                    // The form submission is already stopped.
                    showErrorMessage(errorMessages.join('<br>'));
                } else {
                    // If everything is valid, programmatically submit the form.
                    this.submit();
                }
            });
        }
        });

        // Toast-like notification functions
        function showSuccessMessage(message) {
            const alert = document.createElement('div');
            alert.className = 'alert alert-success alert-dismissible fade show position-fixed';
            alert.style.cssText = 'bottom: 10px; left: 50%; transform: translateX(-50%); z-index: 9999; min-width: 300px;';
            alert.innerHTML = `<i class="fas fa-check-circle me-2"></i> ${message}<button type="button" class="btn-close" data-bs-dismiss="alert"></button>`;
            document.body.appendChild(alert);
            setTimeout(() => bootstrap.Alert.getOrCreateInstance(alert)?.close(), 5000);
        }

        function showErrorMessage(message) {
            const alert = document.createElement('div');
            alert.className = 'alert alert-danger alert-dismissible fade show position-fixed';
            alert.style.cssText = 'bottom: 10px; left: 50%; transform: translateX(-50%); z-index: 9999; min-width: 300px;';
            alert.innerHTML = `<i class="fas fa-exclamation-triangle me-2"></i> ${message}<button type="button" class="btn-close" data-bs-dismiss="alert"></button>`;
            document.body.appendChild(alert);
            setTimeout(() => bootstrap.Alert.getOrCreateInstance(alert)?.close(), 8000);
        }

        // Display server-side messages from full page posts (e.g., the Add action)
        document.addEventListener("DOMContentLoaded", function () {
            var successMsg = "@Html.Raw(Model.SuccessMessage ?? "")";
            if (successMsg) {
                showSuccessMessage(successMsg);
            }

            var errorMsg = "@Html.Raw(Model.ErrorMessage ?? "")";
            if (errorMsg) {
                showErrorMessage(errorMsg);
            }
        });
    </script>
}