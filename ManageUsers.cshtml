@page
@model QApp.Pages.ManagePersonnelModel
@{
    ViewData["Title"] = "Manage Personnel";
}

<div class="d-flex justify-content-between align-items-center mb-3">
    <h1 class="page-title">Manage Users</h1>
</div>
<p class="subtitle">Add, update, and delete Users.</p>

<form method="post">
    @Html.AntiForgeryToken()
    <div class="card mb-4">
        <div class="card-header">
            <h5 class="card-title mb-0"><i class="fas fa-plus btn-icon me-2"></i>Add New User</h5>
        </div>
        <div class="card-body">
            <div class="row g-3">
                <div class="col-md-4">
                    <label asp-for="NewPersonnel.TGI" class="form-label">TGI <span class="error-star" style="color: red;">*</span></label>
                    <input asp-for="NewPersonnel.TGI" class="form-control mandatory @(Html.Raw(ModelState.GetFieldValidationState("NewPersonnel.TGI") == Microsoft.AspNetCore.Mvc.ModelBinding.ModelValidationState.Invalid ? "is-invalid" : ""))" placeholder="Enter TGI" maxlength="40">
                </div>
                <div class="col-md-4">
                    <label asp-for="NewPersonnel.Name" class="form-label">Name <span class="error-star" style="color: red;">*</span></label>
                    <input asp-for="NewPersonnel.Name" class="form-control mandatory @(Html.Raw(ModelState.GetFieldValidationState("NewPersonnel.Name") == Microsoft.AspNetCore.Mvc.ModelBinding.ModelValidationState.Invalid ? "is-invalid" : ""))" placeholder="Enter Name" maxlength="40">
                </div>
                <div class="col-md-4">
                    <label asp-for="NewPersonnel.Role" class="form-label">Role <span class="error-star" style="color: red;">*</span></label>
                    <select asp-for="NewPersonnel.Role" class="form-control mandatory @(Html.Raw(ModelState.GetFieldValidationState("NewPersonnel.Role") == Microsoft.AspNetCore.Mvc.ModelBinding.ModelValidationState.Invalid ? "is-invalid" : ""))" asp-items="Model.RoleList">
                        <option value="">-- Select Role --</option>
                    </select>
                </div>
            </div>

            <div class="row mt-3">
                <div class="col-md-12 text-end">
                    <button type="submit" class="btn btn-primary" name="handler" value="add">
                        <i class="fas fa-plus btn-icon me-2"></i>Add
                    </button>
                </div>
            </div>
            <small class="text-muted"><span class="error-star" style="color: red;">*</span> Field is mandatory</small>
        </div>
    </div>
</form>

@if (Model.PersonnelList != null && Model.PersonnelList.Any())
{
    <div class="table-responsive">
        <table class="table table-striped table-hover mb-0" id="personnelTable">
            <thead>
                <tr>
                    <th data-sort="string">TGI</th>
                    <th data-sort="string">Name</th>
                    <th data-sort="string">Role</th>
                    <th>Actions</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var personnel in Model.PersonnelList)
                {
                    <tr>
                        <td>@personnel.TGI</td>
                        <td>@personnel.Name</td>
                        <td>@(personnel.Role == 1 ? "Admin" : (personnel.Role == 2 ? "Signatory" : "Unknown"))</td>
                        <td class="text-center">
                           
                            @if (string.Equals(personnel.TGI, Model.LoggedInUserTGI, StringComparison.OrdinalIgnoreCase))
                            {
                                <span class="badge bg-secondary">Current User</span>
                            }
                            else
                            {
                                <div class="d-flex gap-1 justify-content-center">
                                    <button type="button" class="btn btn-primary btn-sm update-btn" data-personnel-tgi="@personnel.TGI" title="Edit Personnel">
                                        <i class="fas fa-edit"></i>
                                    </button>
                                    <button type="button" class="btn btn-primary btn-sm delete-btn" data-personnel-tgi="@personnel.TGI" title="Delete Personnel">
                                        <i class="fas fa-trash"></i>
                                    </button>
                                </div>
                            }
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>

    @if (Model.TotalPages > 1)
    {
        <div class="card-footer">
            <form method="get">
                <nav aria-label="Personnel Pagination">
                    <ul class="pagination justify-content-center mb-0">
                        @if (Model.PageNumber > 1)
                        {
                            <li class="page-item"><a class="page-link" asp-page="/ManagePersonnel" asp-route-PageNumber="@(Model.PageNumber - 1)">Previous</a></li>
                        }
                        else
                        {
                            <li class="page-item disabled"><span class="page-link">Previous</span></li>
                        }

                        @{
                            int maxPagesToShow = 5;
                            int startPage = Math.Max(1, Model.PageNumber - (maxPagesToShow / 2));
                            int endPage = Math.Min(Model.TotalPages, startPage + maxPagesToShow - 1);
                            if (endPage - startPage + 1 < maxPagesToShow) { startPage = Math.Max(1, endPage - maxPagesToShow + 1); }

                            @if (startPage > 1)
                            {
                                <li class="page-item"><a class="page-link" asp-page="/ManagePersonnel" asp-route-PageNumber="1">1</a></li>
                                @if (startPage > 2)
                                {
                                    <li class="page-item disabled ellipsis"><span class="page-link">...</span></li>
                                }
                            }

                            @for (int i = startPage; i <= endPage; i++)
                            {
                                <li class="page-item @(i == Model.PageNumber ? "active" : "")"><a class="page-link" asp-page="/ManagePersonnel" asp-route-PageNumber="@i">@i</a></li>
                            }

                            @if (endPage < Model.TotalPages)
                            {
                                @if (endPage < Model.TotalPages - 1)
                                {
                                    <li class="page-item disabled ellipsis"><span class="page-link">...</span></li>
                                }
                                <li class="page-item"><a class="page-link" asp-page="/ManagePersonnel" asp-route-PageNumber="@Model.TotalPages">@Model.TotalPages</a></li>
                            }
                        }

                        @if (Model.PageNumber < Model.TotalPages)
                        {
                            <li class="page-item"><a class="page-link" asp-page="/ManagePersonnel" asp-route-PageNumber="@(Model.PageNumber + 1)">Next</a></li>
                        }
                        else
                        {
                            <li class="page-item disabled"><span class="page-link">Next</span></li>
                        }
                    </ul>
                </nav>
                <div class="text-center text-muted small mt-2">
                    Showing page @Model.PageNumber of @Model.TotalPages (@Model.TotalResults total results)
                </div>
            </form>
        </div>
    }
}
else
{
    <div class="card">
        <div class="card-body text-center">
            <i class="fas fa-info-circle fa-3x text-muted mb-3"></i>
            <h5>No User Found</h5>
            <p class="text-muted">Start by adding the first user entry using the form above.</p>
        </div>
    </div>
}

<div class="modal fade" id="updateModal" tabindex="-1" aria-labelledby="updateModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="updateModalLabel">Update User</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <div id="updatePersonnelForm">
                    <div class="text-center">
                        <div class="spinner-border" role="status"><span class="visually-hidden">Loading...</span></div>
                        <p class="mt-2">Loading user details...</p>
                    </div>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal"><i class="fas fa-xmark btn-icon me-2"></i>Cancel</button>
                <button type="button" class="btn btn-primary" id="confirmUpdateBtn" disabled><i class="fas fa-save btn-icon me-2"></i>Update</button>
            </div>
        </div>
    </div>
</div>

<div class="modal fade" id="deleteModal" tabindex="-1" aria-labelledby="deleteModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="deleteModalLabel">Confirm Delete</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <strong>You are about to delete this users entry.</strong><br />
                This action is not reversible.
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal"><i class="fas fa-xmark btn-icon me-2"></i>Cancel</button>
                <button type="button" class="btn btn-primary" id="confirmDeleteBtn"><i class="fas fa-trash btn-icon me-2"></i>Confirm</button>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        document.addEventListener('DOMContentLoaded', function () {
            const table = document.getElementById('personnelTable');
            if (!table) return;

            const roleList = @Html.Raw(Json.Serialize(Model.RoleList.Select(s => new { value = s.Value, text = s.Text })));

            // Table sorting logic (no changes needed here)
            const headers = table.querySelectorAll('thead th[data-sort]');
            headers.forEach((header, index) => {
                header.classList.add('sortable');
                header.addEventListener('click', () => {
                    const sortType = header.getAttribute('data-sort');
                    const currentDirection = header.classList.contains('asc') ? 'asc' : 'desc';
                    const newDirection = currentDirection === 'asc' ? 'desc' : 'asc';
                    headers.forEach(h => h.classList.remove('asc', 'desc'));
                    header.classList.add(newDirection);
                    sortTable(table, index, sortType, newDirection);
                });
            });

            function sortTable(table, columnIndex, sortType, direction) {
                const tbody = table.querySelector('tbody');
                const rows = Array.from(tbody.querySelectorAll('tr'));
                rows.sort((a, b) => {
                    const aValue = a.cells[columnIndex].textContent.trim();
                    const bValue = b.cells[columnIndex].textContent.trim();
                    const comparison = aValue.localeCompare(bValue, undefined, { numeric: sortType === 'number' });
                    return direction === 'asc' ? comparison : -comparison;
                });
                rows.forEach(row => tbody.appendChild(row));
            }

            // Modal handling
            const updateModal = new bootstrap.Modal(document.getElementById('updateModal'));
            const deleteModal = new bootstrap.Modal(document.getElementById('deleteModal'));
            const updatePersonnelFormBody = document.getElementById('updatePersonnelForm');
            const confirmUpdateBtn = document.getElementById('confirmUpdateBtn');
            const confirmDeleteBtn = document.getElementById('confirmDeleteBtn');
            let currentUpdateTGI = null;
            let currentDeleteTGI = null;

            document.addEventListener('click', function (e) {
                if (e.target.closest('.update-btn')) {
                    const tgi = e.target.closest('.update-btn').getAttribute('data-personnel-tgi');
                    showUpdateForm(tgi);
                }
                if (e.target.closest('.delete-btn')) {
                    const tgi = e.target.closest('.delete-btn').getAttribute('data-personnel-tgi');
                    showDeleteConfirmation(tgi);
                }
            });

            confirmUpdateBtn.addEventListener('click', () => updatePersonnel(currentUpdateTGI));
            confirmDeleteBtn.addEventListener('click', () => deletePersonnel(currentDeleteTGI));

            function showUpdateForm(tgi) {
                currentUpdateTGI = tgi;
                document.getElementById('updateModalLabel').textContent = `Update User: ${tgi}`;
                updatePersonnelFormBody.innerHTML = `<div class="text-center"><div class="spinner-border" role="status"></div><p class="mt-2">Loading details...</p></div>`;
                confirmUpdateBtn.disabled = true;
                updateModal.show();
                fetch(`?handler=PersonnelDetails&tgi=${encodeURIComponent(tgi)}`)
                    .then(res => res.json())
                    .then(data => {
                        if (data.success) {
                            displayUpdateForm(data.data);
                        } else {
                            updatePersonnelFormBody.innerHTML = `<div class="alert alert-danger">${data.message}</div>`;
                        }
                    });
            }

            function showDeleteConfirmation(tgi) {
                currentDeleteTGI = tgi;
                deleteModal.show();
            }

            // CORRECTED FUNCTION
            function displayUpdateForm(personnel) {
                const roleOptions = roleList.map(item => `<option value="${item.value}" ${item.value == personnel.role ? 'selected' : ''}>${item.text}</option>`).join('');
                // ⭐ FIX 1: Added onsubmit="return false;" to the form tag
                const formHtml = `
                    <form id="updateFormInternal" onsubmit="return false;">
                        <div class="row g-3">
                            <div class="col-md-6">
                                <label class="form-label">TGI <span class="error-star" style="color: red;">*</span></label>
                                <input id="update_TGI" class="form-control predefined" value="${personnel.tgi || ''}" readonly>
                            </div>
                            <div class="col-md-6">
                                <label class="form-label">Name <span class="error-star" style="color: red;">*</span></label>
                                <input id="update_Name" class="form-control mandatory" value="${personnel.name || ''}" maxlength="50">
                            </div>
                            <div class="col-md-12">
                                <label class="form-label">Role <span class="error-star" style="color: red;">*</span></label>
                                <select id="update_Role" class="form-control mandatory">${roleOptions}</select>
                            </div>
                        </div>
                        <small class="text-muted mt-2 d-block"><span class="error-star" style="color: red;">*</span> Field is mandatory</small>
                    </form>`;
                updatePersonnelFormBody.innerHTML = formHtml;
                confirmUpdateBtn.disabled = false;
            }

            // CORRECTED FUNCTION
                   function updatePersonnel(tgi) {
            // Get elements and their values
            const nameElement = document.getElementById('update_Name');
            const roleElement = document.getElementById('update_Role');
            const nameValue = nameElement.value.trim();
            const roleValue = roleElement.value;

            // --- ⭐ New Validation Logic ---
            let isValid = true;

            // Reset previous validation states
            nameElement.classList.remove('is-invalid');
            roleElement.classList.remove('is-invalid');

            // Validate Name field
            if (!nameValue) {
                nameElement.classList.add('is-invalid');
                isValid = false;
            }

            // Validate Role field
            if (!roleValue) {
                roleElement.classList.add('is-invalid');
                isValid = false;
            }

            // If any field is invalid, stop and show a toast
            if (!isValid) {
                showToastMessage('Name is required.', 'error');
                return;
            }
            // --- End of New Validation Logic ---

            const antiForgeryToken = document.querySelector('input[name="__RequestVerificationToken"]').value;
            const formData = new FormData();
            formData.append('tgi', tgi);
            formData.append('name', nameValue); // Use the trimmed value
            formData.append('role', roleValue);
            formData.append('__RequestVerificationToken', antiForgeryToken);

            confirmUpdateBtn.disabled = true;
            confirmUpdateBtn.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Updating...';

            fetch('?handler=UpdatePersonnel', { method: 'POST', body: formData })
                .then(res => res.json())
                .then(data => {
                    if (data.success) {
                        showToastMessage(data.message, 'success');
                        setTimeout(() => { window.location.href = window.location.href; }, 1500);
                    } else {
                        throw new Error(data.message);
                    }
                })
                .catch(err => showToastMessage(`Update error: ${err.message}`, 'error'))
                .finally(() => {
                     updateModal.hide();
                     confirmUpdateBtn.disabled = false;
                     confirmUpdateBtn.innerHTML = '<i class="fas fa-save btn-icon me-2"></i>Update';
                });
        }

            // CORRECTED FUNCTION
            function deletePersonnel(tgi) {
                const antiForgeryToken = document.querySelector('input[name="__RequestVerificationToken"]').value;
                const formData = new FormData();
                formData.append('tgi', tgi);
                formData.append('__RequestVerificationToken', antiForgeryToken);

                confirmDeleteBtn.disabled = true;
                confirmDeleteBtn.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Deleting...';

                fetch('?handler=DeletePersonnel', { method: 'POST', body: formData })
                    .then(res => res.json())
                    .then(data => {
                        if (data.success) {
                            showToastMessage(data.message, 'success');
                            // ⭐ FIX 2: Replaced location.reload() with a clean GET redirect.
                            setTimeout(() => { window.location.href = window.location.href; }, 1500);
                        } else {
                            throw new Error(data.message);
                        }
                    })
                    .catch(err => showToastMessage(`Delete error: ${err.message}`, 'error'))
                    .finally(() => {
                        deleteModal.hide();
                        confirmDeleteBtn.disabled = false;
                        confirmDeleteBtn.innerHTML = '<i class="fas fa-trash btn-icon me-2"></i>Confirm';
                    });
            }

            // Toast message functions (no changes needed here)
            function showToastMessage(message, type = 'success') {
                const alert = document.createElement('div');
                alert.className = `alert alert-${type === 'success' ? 'success' : 'danger'} alert-dismissible fade show position-fixed`;
                alert.style.cssText = 'bottom: 10px; left: 50%; transform: translateX(-50%); z-index: 9999; min-width: 300px;';
                alert.innerHTML = `<i class="fas ${type === 'success' ? 'fa-check-circle' : 'fa-exclamation-triangle'}"></i> ${message}<button type="button" class="btn-close" data-bs-dismiss="alert"></button>`;
                document.body.appendChild(alert);
                setTimeout(() => alert.remove(), 5000);
            }

            var successMsg = "@Html.Raw(Model.SuccessMessage ?? "")";
            if (successMsg) showToastMessage(successMsg, 'success');

            var errorMsg = "@Html.Raw(Model.ErrorMessage ?? "")";
            if (errorMsg) showToastMessage(errorMsg, 'error');
        });
    </script>
}